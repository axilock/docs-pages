{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Axilock Documentation","text":"<p>Axilock is a state of the art security solution designed to secure your tech stack from day one. It works as a companion that keeps your codebase secure at every step of the way.</p>"},{"location":"#axilock-secret-prevention","title":"Axilock Secret Prevention","text":"<p>Prevents secrets from being committed to your codebase. Axilock takes a proactive approach to secret prevention and saves you time and effort, rather than a reactive approach to secret detection -- where harm is already done and a process needs to be triggered for secret rotation. You will always stay compliant by never pushing a secret in the first place and have a single place to monitor your metrics data of what kinds of secrets are commonly committed and how many times.</p>"},{"location":"#axilock-redactor","title":"Axilock Redactor","text":"<p>Redacts secrets from your codebase. If you have already committed a secret to your codebase, Axilock Redactor will help you remove it. It will also help you remove the secret from your git history and from any other files in your codebase.</p>"},{"location":"secret-prevention/","title":"Axilock Secret Prevention","text":""},{"location":"secret-prevention/#installation","title":"Installation","text":"<p>Run the following command to install Axilock Secret Prevention:</p> <pre><code>curl -L https://get.axilock.ai | sh\n</code></pre> <p>Installation will require authentication with your Axilock account via your VCS (GitHub, GitLab, Bitbucket, etc.).</p>"},{"location":"secret-prevention/#usage","title":"Usage","text":"<p>Once installed and logged in, axilock secret prevention will automatically scan your commits on every push to your repository. If any secrets are found, the push will be rejected and you will be notified.</p>"},{"location":"secret-prevention/#bypass","title":"Bypass","text":"<p>In cases where you intentionally want to push a commit with a secret (for whatever reason) , you can use git's <code>--no-verify</code> flag to bypass the Axilock prevention check.</p> <p>Danger</p> <p>It is is not recommended to bypass secret prevention as it can lead to compromised credentials and security breaches.</p> <p>Example:</p> <pre><code>git commit -m \"Add secret\" --no-verify\n</code></pre>"},{"location":"secret-prevention/#uninstallation","title":"Uninstallation","text":"<p>Run the following command to uninstall Axilock Secret Prevention: <pre><code>~/.axi/axi uninstall\n</code></pre></p>"},{"location":"secret-prevention/how-it-works/","title":"How it works","text":""},{"location":"secret-prevention/how-it-works/#core-philosophy","title":"Core Philosophy","text":"<p>Axilock aims to take a prevention first approach, without compromising on coverage or development workflow.</p>"},{"location":"secret-prevention/how-it-works/#installation","title":"Installation","text":"<p>Axi binary ships with an embedded installer accessible through <code>axi install</code> command. Two installation processes are possible:</p> <ol> <li><code>axi install</code> - open a one time github/gitlab/bitbucket/SSO login window in browser. Recommended for individual installs.</li> <li><code>axi install --api-key=KEY</code> - uses the provided api key for installation. Recommended for MDM based installs with pre-generated api keys for all devices under an organization.</li> </ol> <p>Both installation methods ensure a backend authentication has been completed in order to populate coverage information.</p> <p>The installer primarily:</p> <ol> <li>Install <code>axi</code> in the $AXI_HOME directory (typically <code>~/.axi</code>)</li> <li>Set global <code>core.hooksPath</code> to an axi controlled location (typically <code>$AXI_HOME/hooks</code>)</li> <li>Create symlinks for all possible git hooks in <code>$AXI_HOME/hooks</code> pointing to axi binary.</li> </ol> <p>This ensures <code>axi</code> captures all git hooks, but the story doesn't end here. If it were, user controlled hooks (local to repository directory) would never run.</p> <p>Info</p> <p><code>git</code> considers <code>core.hooksPath</code> for all hooks, ie you cannot selectively have only <code>pre-push</code> hook at /path/to/xyz vs pre-commit hook at /another/path/to/abc, all hooks must be in a single directory. Further, if a global <code>core.hooksPath</code> is set, then local hooks at <code>.git/hooks</code> are ignored. If local <code>core.hooksPath</code> is set then global <code>core.hooksPath</code> is ignored.</p> <p>Following flow chart covers the installation process:</p> <p></p>"},{"location":"secret-prevention/how-it-works/#catchall-hooks","title":"Catchall hooks","text":"<p>The above installation ensures all git hooks are captured by axi inside the <code>$AXI_HOME/hooks</code> directory. In order for existing repository level hooks to run, the <code>hooksPath</code> must be set back to local repo directory. This can be done in local <code>.git/config</code>.</p> <p>Catchall hooks catch any and all hooks and then installs axi pre-push hook locally into the repository. The intended behavior is similar to git's template directory with the added benefit of working in existing repositories as well.</p> <p></p>"},{"location":"secret-prevention/how-it-works/#pre-push-hook","title":"Pre Push Hook","text":"<p>The locally installed <code>pre-push</code> hook created by catchall hooks calls axi binary thus delegating the pre push task to it.</p> <p>The pre push routine inside <code>axi</code> runs trufflehog to identify secrets in the codebase and blocks the push if any secrets are present in any of the commits being pushed. It does not scan already pushed commits since they were not introduced by this user and thus not her responsibility.</p> <p>It is also the responsibility of this routine to manage custom secret regexes for the organization.</p> <p></p>"},{"location":"secret-prevention/how-it-works/#uninstallation","title":"Uninstallation","text":"<p>The <code>axi uninstall</code> command removes the <code>$AXI_HOME</code> directory effectively uninstalling axi from the system. It also unsets the <code>core.hooksPath</code> in the global git config. Whenever a <code>pre-push</code> is triggered after uninstallation, it will either replace itself with user defined hook (from <code>pre-push.user</code>) or remove itself altogether.</p>"},{"location":"secret-prevention/self-host/","title":"Self host secret prevention suite","text":"<p>In order to self host, you'll need to configure your:</p> <ul> <li>backend</li> <li>frontend</li> <li>cli</li> </ul> <p>to communicate with each other inside your organization.</p>"},{"location":"secret-prevention/telemetry/","title":"Telemetry Collection","text":"<p>The Axilock backend collects certain metadata from the user's system in order to power the insights frontend (device coverage, secret detection frequency etc)</p> <p>Info</p> <p>No secret or code ever leaves the user system.</p> <p>In case you do not wish to send any telemetry, you can set up your own axi backend for the insights frontend.</p>"},{"location":"secret-prevention/telemetry/#metadata","title":"Metadata","text":"<p>Following metadata data is collected:</p> <pre><code>Metadata{\n        OS:         runtime.GOOS,\n        Arch:       runtime.GOARCH,\n        Hostname:   hostname,\n        Username:   username,\n        GoVersion:  runtime.Version(),\n        CliVersion: cli_version,\n        NumCPU:     runtime.NumCPU(),\n        PID:        os.Getpid(),\n        Timestamp:  time.Now(),\n    }\n</code></pre> <pre><code>pb.SendCommitDataRequest_CommitObjects{\n            CommitId:     commit.ID,\n            CommitAuthor: commit.Author,\n            CommitTime:   timestamppb.New(commit.Time),\n        }\n</code></pre> <pre><code>pb.SecretAlertRequest{\n                FileName:   secret.File,\n                Repo:       repo,\n                LineNumber: int64(secret.Line),\n                CommitId:   secret.Commit.ID,\n                SecretType: secret.Type,\n                IsVerified: false,\n            }\n</code></pre> <p>You can look at the entire proto contract here.</p>"},{"location":"secret-prevention/why/","title":"Why ?","text":"<p>Plenty of secret detection offerings exist, what makes Axilock useful ?</p> <p>Prevention  Detection</p> <p>Axilock gives you happy metrics on what is being protected.</p> Feature Axilock Github Advanced Security GitGuardian pre-commit BitBucket Secret Detection Secret Prevention <sup>*</sup> <sup>*</sup> Seamless integration to all repos Prevention Coverage Metrics Price Free 20$ per user per month  Free for 25 members Free Free for 5 users <p><sup>*</sup>: Needs extra steps</p>"},{"location":"secret-prevention/self-host/backend/","title":"Axilock Backend","text":"<p>A backend service for Axilock push protection application, built with Go and modern microservices architecture.</p>"},{"location":"secret-prevention/self-host/backend/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.24.0 or higher</li> <li>Docker and Docker Compose</li> <li>PostgreSQL 16</li> <li>Redis 7.4.1</li> <li>Git</li> </ul>"},{"location":"secret-prevention/self-host/backend/#setup-instructions","title":"Setup Instructions","text":""},{"location":"secret-prevention/self-host/backend/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Quick setup to download the backend repository and setup the environment.</p> <pre><code>git clone https://github.com/axilock/axilock-backend.git\ncd axilock-backend\n</code></pre>"},{"location":"secret-prevention/self-host/backend/#2-configure-environment","title":"2. Configure Environment","text":"<p>Copy the example environment file and modify it according to your needs:</p> <pre><code>cp env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your specific configuration: - Database connection details - Redis configuration - JWT secrets - Other service-specific configurations</p>"},{"location":"secret-prevention/self-host/backend/#21-configure-github-app","title":"2.1 Configure Github App","text":"<p>You will need to create a github app to authenticate with the github api. You can do this by following the instructions here. This github app will be used to authenticate with the github api to get the commit metadata which will give the coverage of how haw users are actively using the secrets protection.</p> <p>Info</p> <p>You will also need the private key file for the github app to be stored in the root directory of the project and name the file as <code>axilock.pem</code> which is the default name used by the backend.  </p>"},{"location":"secret-prevention/self-host/backend/#22-configure-environment-variables","title":"2.2 Configure Environment Variables","text":"<p>Fill the .env file with your specific configuration:</p> <pre><code>HTTP_SERVER_ADDRESS=0.0.0.0:8080\nGRPC_SERVER_ADDRESS=0.0.0.0:8090\nRUNNING_ENV=&lt;Enter your running environment&gt;\nGITHUB_APP_ID=&lt;Enter your github app id&gt;\nGITHUB_CLIENT_SECRET=&lt;Enter your github client secret&gt;\nGITHUB_CLIENT_ID=&lt;Enter your github client id&gt;\n</code></pre>"},{"location":"secret-prevention/self-host/backend/#3-start-services-with-docker-compose","title":"3. Start Services with Docker Compose","text":"<p>The application uses Docker Compose to manage services. Start all services with:</p> <pre><code>docker-compose up -d\n</code></pre> <p>This will start: - PostgreSQL database (port 5432) - Redis cache (port 6379) - Backend service (ports 8080 and 8090)</p>"},{"location":"secret-prevention/self-host/backend/#4-build-and-run-locally","title":"4. Build and Run Locally","text":"<p>Alternatively, you can build and run the application locally:</p> <pre><code># Build the project\ngo build -o axilock .\n\n# Run the application\n./axilock\n</code></pre>"},{"location":"secret-prevention/self-host/backend/#5-run-tests","title":"5. Run Tests","text":"<p>To run the test suite:</p> <pre><code>make test\n</code></pre>"},{"location":"secret-prevention/self-host/backend/#development","title":"Development","text":""},{"location":"secret-prevention/self-host/backend/#code-style-and-linting","title":"Code Style and Linting","text":"<p>The project uses golangci-lint for code style enforcement. Run:</p> <pre><code>make lint\n</code></pre>"},{"location":"secret-prevention/self-host/backend/#api-documentation","title":"API Documentation","text":"<p>The backend service provides RESTful and gRPC APIs with endpoints documented in the codebase. The main entry points are:</p> <ul> <li>HTTP API: <code>http://localhost:8080</code></li> <li>gRPC Service: <code>http://localhost:8090</code></li> </ul>"},{"location":"secret-prevention/self-host/backend/#api-endpoints","title":"API Endpoints","text":"<p>By default the endpoint run on HTTP, to configure your application to run on HTTPS you can configure a reverse proxy such as Nginx or Caddy to accept HTTPS requests and forward them to the backend service.</p>"},{"location":"secret-prevention/self-host/backend/#database-migrations","title":"Database Migrations","text":"<p>Database migrations are managed in the <code>migrations/</code> directory. To apply migrations:</p> <pre><code>docker-compose exec db psql -U admin -d axilockdb -f /path/to/migration.sql\n</code></pre>"},{"location":"secret-prevention/self-host/backend/#security","title":"Security","text":"<p>The application uses:</p> <ul> <li>PostgreSQL to store commit metadata and store users details to map them to github users</li> <li>Redis to store cli token for session data.</li> </ul>"},{"location":"secret-prevention/self-host/backend/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"secret-prevention/self-host/backend/#other-features","title":"Other Features","text":"<ul> <li>We also monitor your GitHub commits for alien pushes to your GitHub repositories due to compromised or leaked GitHub credentials. Post installation of axilock on your dev machines you have complete confidence that every commit in your VCS repositories goes though an audit process. The first problem we are starting with is preventing secrets from ever reaching your VCS repositories. </li> <li>Our future road map includes solving for unified linting and sast rules across your teams and reducing the burden on CI pipelines to bring linting and scanning policies on device and save a ton on infra cost and provied unified standards for your teams to follow.</li> </ul>"},{"location":"secret-prevention/self-host/backend/#license","title":"License","text":"<p>This project is licensed under the Apache 2.0 License - see the LICENSE file for details.</p>"},{"location":"secret-prevention/self-host/backend/#contact","title":"Contact","text":"<p>For support or questions, please open an issue in the GitHub repository.</p>"},{"location":"secret-prevention/self-host/cli/","title":"Axilock CLI","text":"<p>The Axilock CLI is is responsible for installing the axi pre-push in your machine.</p> <p>Info</p> <p>When you run <code>curl -sL https://get.axilock.ai | sh</code>, the bash script downloads this CLI and triggers the installation process.</p>"},{"location":"secret-prevention/self-host/cli/#prerequisites","title":"Prerequisites","text":"<ul> <li>Setup Axilock backend</li> <li>Install Go 1.24 or higher</li> <li>cmake</li> </ul>"},{"location":"secret-prevention/self-host/cli/#assumptions","title":"Assumptions","text":"<ul> <li>Backend http service is at  : <code>backend:8080</code></li> <li>Backend grpc service is at  : <code>grpc:443</code></li> <li>Frontend http service is at : <code>frontend:80</code></li> </ul>"},{"location":"secret-prevention/self-host/cli/#building","title":"Building","text":"<p>Edit the <code>config.mk</code> file to match your configuration.</p>"},{"location":"secret-prevention/self-host/cli/#configuration-file","title":"Configuration File","text":"<p>Based on the assumptions above, your <code>config.mk</code> could look like this: <pre><code>SENTRY_DSN := \"\"\nGRPC_SERVER_NAME := grpc\nGRPC_PORT := 443\nFRONTEND_URL := http://frontend\nGRPC_TLS := true\nDEBUG := false\nAUTO_UPDATE := notify\nVERBOSE := fals\nOFFLINE := false\n</code></pre></p>"},{"location":"secret-prevention/self-host/cli/#configuration-options","title":"Configuration Options","text":"Variable Description Default Value Options <code>SENTRY_DSN</code> Sentry DSN URL for error tracking. You can leave this empty if you don't want to use sentry. <code>https://...</code> Valid Sentry DSN URL or <code>\"\"</code> <code>GRPC_SERVER_NAME</code> Hostname of the insights gRPC server. This is used to send coverage metrics on how many commits have been protected etc. No secret or code is ever sent. <code>grpc.axilock.ai</code> Any valid hostname <code>GRPC_PORT</code> Port number for the insights gRPC server <code>443</code> Valid port number <code>GRPC_TLS</code> Enable TLS for gRPC connections. You can disable this if you don't want to use TLS. <code>true</code> <code>true</code>, <code>false</code> <code>FRONTEND_URL</code> HTTP/HTTPS URL of the insights frontend. This is used for <code>axi auth</code> based login. You can leave this out if you're using MDM based installs via <code>axi install --api-key=...</code> <code>https://app.axilock.ai</code> Valid Frontend URL <code>DEBUG</code> Enable debug mode. When <code>true</code>: Enables: verbose, disables: autoupdate, sentry. <code>false</code> <code>true</code>, <code>false</code> <code>AUTO_UPDATE</code> Auto-update behavior.<code>on</code>: Always update, ie replace axi binary at <code>~/.axi/bin/axi</code><code>off</code>: Never update<code>notify</code>: Notify when new version is available but do not update. <code>notify</code> <code>on</code>, <code>off</code>, <code>notify</code> <code>VERBOSE</code> Enable verbose logging <code>false</code> <code>true</code>, <code>false</code> <code>OFFLINE</code> Run in completely offline mode. In this mode, no network connectivity is required. <code>axi install</code> will not popup a login screen as well. <code>false</code> <code>true</code>, <code>false</code> <p>Auto Update Options</p> <p>When <code>AUTO_UPDATE</code> is set to <code>on</code>, it replaces the binary installed at <code>~/.axi/bin/axi</code>.</p> <p>Offline Mode</p> <p>When <code>OFFLINE</code> is set to <code>true</code>, the application will run in completely offline mode without any network connectivity. This means you'll not be capturing any metrics or coverage info.</p>"},{"location":"secret-prevention/self-host/cli/#compiling","title":"Compiling","text":"<p>You can compile the CLI by simply running make:</p> <pre><code>make\n</code></pre> <p>Tip</p> <p>You can set compile time flags dynamically while running make. For eg: <pre><code>make DEBUG=true\n</code></pre></p>"},{"location":"secret-prevention/self-host/cli/#installation","title":"Installation","text":"<p>Finally, install axi client by:</p> <pre><code>bin/axi install\n</code></pre> <p>or if you're using MDM based installs,</p> <pre><code>bin/axi install --api-key=...\n</code></pre>"},{"location":"secret-prevention/self-host/cli/#usage","title":"Usage","text":"<p>That's it ! Carry on with your regular workflows. Axi will automatically block any git push that contains secrets.</p>"},{"location":"secret-prevention/self-host/frontend/","title":"Axilock Frontend","text":"<p>Axilock Frontend gives valuable insights for the secrets prevented by Axilock. It also shows coverage metrics that keeps you up to date on the status of Axilock adoption.</p>"},{"location":"secret-prevention/self-host/frontend/#prerequisites","title":"Prerequisites","text":"<ul> <li>Setup Axilock backend</li> </ul>"},{"location":"secret-prevention/self-host/frontend/#assumptions","title":"Assumptions","text":"<ul> <li>Backend http service is at: <code>backend:8080</code></li> </ul>"}]}